{"meta":{"title":"枳暮","subtitle":"","description":"","author":"枳暮","url":"https://maplepoet.github.io/hexo","root":"/hexo/"},"posts":[{"title":"AWS_Solution_Architect","date":"2024-05-22T15:27:12.000Z","path":"2024/05/22/AWS-Solution-Architect/","permalink":"https://maplepoet.github.io/hexo/2024/05/22/AWS-Solution-Architect/","categories":[],"tags":[],"excerpt":"IAMEC2Security Group Placement GroupsCluster: a low-latency group in a single Availability Zone spread: across underlying hardware Partition: across many different partitions (which rely on different sets of racks) within an AZ. EC2 Hibernate:in-memory (RAM), Usage: Long-running processing, Saving the RAM state, The root EBS volume must be encrypted; Instance Type"},{"title":"VueJS","date":"2024-05-22T15:23:37.000Z","path":"2024/05/22/VueJS/","permalink":"https://maplepoet.github.io/hexo/2024/05/22/VueJS/","categories":[],"tags":[],"excerpt":"VueJS script CreateApp props （for Component） props初始化后不能在methods修改 data methods watch. can use a data as a function name for example: counter(value){if value &gt; 5 …} computed component emits templates with event v-html v-once :href&#x3D;”https://www.google.com“ or v-bind:href&#x3D;”xxx” v-bind :class :disabled v-if v-else v-else-if v-show. if the conditions is not fulfilled, then the element”s display is none V-for key v-on v-on:click (right&#x2F;left) v-on:input &#x2F; v-on:keyup.enter v-on:submit.prevent v-on:blur v-model 双向， input 和 text&#x2F;其他 input (text &#x2F; number &#x2F; textarea). $refs.xxx.value is also a string select -option (dropdown) input type&#x3D;checkbox, must use with value&#x3D;”xxx” &#x2F; single checkbox use a boolean value $ref $emit 和 $props 方向相反 child component使用parents的methods component添加 this.$emit(“xxx”), parent Component使用@xxx&#x3D;”yyy”, yyy是parent Component的methods provide, inject需要父子关系 父provide 子inject, 相当于父中要引用子component Scoped Styling Slots 放在component里被引用成template scoped Template v-slot:default or v-shot:”name” or #default &#x2F; #name Dynamic component :is 引用不同的component ‘include’ and ‘exclude’ ‘max’ Teleport to&#x3D;”body” $refs ref&#x3D;”xxx” this.$refs.xxx.value Lifecycle Hooks beforeCreate created beforeMount mounted beforeUpdate updated beforeUnmount unmounted errorCaptured renderTracked renderTriggered activated deactivated serverPrefetch Components Kebab-case, camelCase, PascalCase, snake_case Name component with v-for Provide&#x2F;Inject Form Inputs checkbox 单个。true&#x2F;false 多个。 value，一个array dropdown blur Fetch() Post Fetch(url,{ method:’POST’, headers: { ‘Content-Type’: xxx}, body: JSON.stringify({name:xxx rating:xxx})}) Get Fetch(url ).then ( (response)&#x3D;&gt; {if (response.ok) {return response.json();}}).then( (data)&#x3D;&gt;{ console.log(data)}); .catch((error) &#x3D;&gt; {}); const response &#x3D; await fetch(), async before the function name const responseData &#x3D; await response.json(); if (!response.ok) { error } Route (158-179) import {createRouter} from ‘vue-router’ app.use(router) navigation nav herf this.$router.push(“&#x2F;xxx”) linkActiveClass: ‘xxx’ . 默认是anchor tag or add props:true in the routes this.$route.params.xxx watch: { $route(newRoute){}} redirect, alias, Path: “&#x2F;:notFound(.*)” Nested Route, children:[] in the routes named routes. return {name: ‘’, params: {id: xxx}, query:{ sort: ‘asc’}} Query with route “?sort&#x3D;asc”, this.$route.query name router-view (multiple components) scrollBehavior(to, from, savedPosition) Navigation Guard, router.beforeEach(function(to, from, next){}); beforeEnter(in the routes), in the component methods: beforeRouteEnter beforeRouteUpdate beforeRouteLeave Global afterEach Guard router.afterEach(function(to, from){}); meta: { requiresAuth: true }. in the routes seperate router.js or vue. Export default router. Transition， TransitionGroup only one child element v-enter-from，v-enter-active，v-enter-to V-enter-active{ Animation: xxx 0.5s xxx} v-leave-from，v-leave-to name&#x3D;”xxx”. Xxx-enter-xxx &#x2F; xxx-leave-xxx Or enter-to-class&#x3D;”” leave-to-class&#x3D;”” if two element, use v-if, v-else to make sure only one element show in the transition mode&#x3D;”in-out&#x2F;out-in” Event: beforeEnter(el), beforeLeave(el). Enter(el, done) {done();} Animation .animate { tranform: xxx} @keyframe xxx {from&#x2F;to or 0%-&gt;100%} Animation List with TransitionGroup xxx-move { transition: tranfrom 0.8s ease} :css&#x3D;”false” route changes, use v-slot with route-view, use :is&#x3D;”xxx.Component” transition name&#x3D;”route” , Route-enter-active, route-leave-active, inside the use v-slot, then inside transition use Router.isReady().then(function(){app.mount(“#app”)}); Vuex import “createStore” from ‘vuex’; const store &#x3D; createStore({ state() { return { counter:0}}}) this.$store.state.counter, glabal value mutations in state(), mutations: { xxx(state) { } or yyy(state, payload) { payload.value }} this.$store.commit(“xxx”) or this.$store.commit(‘yyy’, {value: zzz}) Getters in state(), getters: { xxx(state){ return state.xxx; }} or { yyy(state&#x2F;_, getters){ getters.xxx }} this.$store.getters.xxx Actions between mutation and getters in state(), can use the same function name in mutation, xxx(context) { context.commit(‘xxx’, payload); } xxx-&gt; mutation dispatch from other actions add timeout in the action asynchronous this.$store.dispatch({ }) Mapper import { mapGetters } from ‘vuex’; computed: { …mapGetters([‘xxx’])} not to use this.$store.getters.xxx import { mapActions} from ‘vuex’; …mapActions([‘xxx’]) …mapActions({ inc:’xxx’, dec:’yyy’}) rename the action function name organize own store with module const store &#x3D; createStore({modules: { xxx: yyy }}) xxx-&gt;new name yyy-&gt; own module in the getters: xxx(state, getters, rootState, rootGetters) namespace the own module: &#x3D;{namespace: true}, this.$store.getters[‘xxx&#x2F;yyy’]. xxx-&gt; namespace, yyy-&gt;function name computed: { …mapGetters(‘xxx’, [‘yyy’])} seperate store.js file app.use(store) Spinner cache http response data Authentication &#x2F; SPA Single-Page Application 401 Unauthorized 404 Not found Composition API setup() props context attrs, slot, emit, expose data, methods, watch, computed ref, reactive (for Object), toRefs computed, readonly, watchEffect, watchPostEffect, watchSyncEffect, watch Route using props for routing import {useRouter, useLink } from “vue-router” const router &#x3D; useRouter(); router.push(“xxx”) vuex store. import { useStore } from ‘vuex’; Composables make own hook export funtion xxx() { return {xxx}}"},{"title":"PostgreSQL","date":"2024-05-22T15:13:21.000Z","path":"2024/05/22/PostgreSQL/","permalink":"https://maplepoet.github.io/hexo/2024/05/22/PostgreSQL/","categories":[],"tags":[],"excerpt":"PostgreSQL123docker run --name my-postgres -e POSTGRES_PASSWORD=[YOURPASSWORD] -p 5432:5432 -d postgresdocker exec -it my-postgres psql -U postgres COPY File 12345docker cp yourfile.sql my-postgres:/yourfile.sqldocker exec -it my-postgres bashpsql -U postgres -d your_database_name -f /yourfile.sql Create Database1234CREATE DATABASE dbname;\\l\\c dbnameDROP DATABASE [ IF EXISTS ] name Create Table12345678CREATE TABLE table_name( column1 datatype, column2 datatype, column3 datatype, ..... columnN datatype, PRIMARY KEY( 一个或多个列 )); Drop Database1DROP TABLE table_name;"},{"title":"Kubernetes","date":"2024-03-07T13:38:58.000Z","path":"2024/03/07/Kubernetes/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/Kubernetes/","categories":[],"tags":[],"excerpt":"Kubernetesruns on top of Docker as a set of APIs in containers kubectl command Kubernetes vs swarmboth container orchestrators both are solid platforms with vendor backing Swarm: easier to deploy&#x2F;manage Kubernetes: more features and flexibility Advantage of swarm come with docker,single vendor container platform Easier orchestrator to deploy&#x2F;mange follow 80&#x2F;20 rule 20% of features for 80% of use cases run anywhere docker does secure by defalult easier to troubleshoot"},{"title":"Docker","date":"2024-03-07T13:38:52.000Z","path":"2024/03/07/Docker/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/Docker/","categories":[],"tags":[],"excerpt":"DockerBasic12345678910111213141516171819202122docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql# Run the containerdocker container logs xxx# show the logsdocker container top xxx# process list in one containerdocker container inspect xxx# show metadata about the container (startup, config, volumes, networking, etc)docker container stats xxx# Show live performance data for all containersdockerr container run --rm -it --name namexx -p 8080:80 xxx # i means interactively, t means pseudo tty.# Start --it container interactively # after exit, docker container start -ai xxx to enter the containerdocker container exec -it xxx &quot;commands&quot;# run additional command in existing containerdocker container port xxx (name)docker container inspect --format &#x27;&#123;&#123;.NetworkSettings.IPAddress &#125;&#125;&#x27; xxx (name)# a common option for formatting the output of commands using &quot;Go templates&quot; Network12345678910111213141516171819docker network ls# List all docker networksdocker network ls --network bridge # default docker virtual network, which is NAT&quot;ed behind the Host IPdocker network ls --network host# It gains performance by skipping virtual machine but sacrifices security of container modeldocker entwork ls --network none# removes eth0 and only leaves you with localhost interface in containerdocker network inspectdocker network create --driver xxx# Spawns a new virtual network for you to attach containers todocker container run ... --network xxxdocker network connect xxx(network) xxx(container)docker network disconnect Docker Network DNS12345docker container exec -it my_nginx ping old_ngingx (name of other container)# Assignment: Round Robin Testdocker image history nginx:latest# show layers of changes made in image 1234docker pulldocker logindocker tagdocker push PRUNE1234567891011docker system df # see space usagedocker system prune# clean up everything you&quot;re not currently usingdocker image prune -a# remove all iamges you&#x27;re not usingdocker image prune# clean up just &quot;dangling&quot; images"},{"title":"Terraform","date":"2024-03-07T13:38:28.000Z","path":"2024/03/07/Terraform/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/Terraform/","categories":[],"tags":[],"excerpt":"Basic Commands123456789terraform initterraform apply # always apply the filesterraform destroy -target xxx.xxxterraform apply -auto-approveterraform destroy Terraform Statetfstate file Pass a variable 123456terraform applyterraform apply -var &quot;xxx=xxx&quot;terraform apply -var-file terraform-dev.tfvars Set credentials123export AWS_SECERT_ACCESS=xxx​export AWS_ACCESS_ID=xxx or use aws configure command global variable"},{"title":"Ansible","date":"2024-03-07T13:38:22.000Z","path":"2024/03/07/Ansible/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/Ansible/","categories":[],"tags":[],"excerpt":""},{"title":"AWS","date":"2024-03-07T13:38:14.000Z","path":"2024/03/07/AWS/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/AWS/","categories":[],"tags":[],"excerpt":""},{"title":"Kafka Zookeeper","date":"2024-03-07T13:38:06.000Z","path":"2024/03/07/Kafka-Zookeeper/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/Kafka-Zookeeper/","categories":[],"tags":[],"excerpt":"KafkaInstalling KafkaAfter successfully installing Homebrew, we can proceed with the installation of Kafka. To do this, execute the command provided below in the terminal. This command will automatically install the correct version of JDK required for running Kafka. The installation path for Homebrew may vary depending on the chip being used. For Macs with Intel, Kafka will be installed under /usr/local/, while for Macs with Apple silicon, it will be installed under opt/homebrew/. Binaries and scripts will be in /usr/local/bin or opt/homebrew/bin Kafka configurations will be in /usr/local/etc/kafka or opt/homebrew/etc/kafka Zookeeper configuration will be in /usr/local/etc/zookeeper or opt/homebrew/etc/zookeeper The log.dirs config (the location for Kafka data) will be set to /usr/local/var/lib/kafka-logs or opt/homebrew/var/lib/kafka-logs Starting KafkaStarting services is a breeze with Homebrew. To start Kafka, run brew services start kafka in the terminal. This will launch Kafka on port 9092. For more information on this service, run brew services info kafka, or to check port usage, run lsof -i:9092 in the terminal window. 123zookeeper-server-start /usr/local/etc/kafka/zookeeper.propertieskafka-server-start /usr/local/etc/kafka/server.properties Great job! You have successfully launched Kafka on your computer. With Brew, Zookeeper will be automatically managed. You can now create a topic with some partitions, set up a producer, and send messages to the consumers."},{"title":"WSL usage","date":"2024-03-07T12:23:01.000Z","path":"2024/03/07/WSL-usage/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/WSL-usage/","categories":[],"tags":[{"name":"WSL","slug":"WSL","permalink":"https://maplepoet.github.io/hexo/tags/WSL/"},{"name":"Linux","slug":"Linux","permalink":"https://maplepoet.github.io/hexo/tags/Linux/"},{"name":"Windows","slug":"Windows","permalink":"https://maplepoet.github.io/hexo/tags/Windows/"}],"excerpt":"WSL Usgae wsl --status Show the status of Windows Subsystem for Linux wsl --list --online For a list of valid distributions wsl --install -d Ubuntu22.04 Install addtional Windows Subsystem for Linux Distributions wsl --distribution UBuntu-22.04 --user ubuntu Run the specified distribution as the specified user wsl --terminate Ubuntu22.04 Terminate the specified distribution"},{"title":"Hello World","date":"2024-03-07T10:23:01.000Z","path":"2024/03/07/hello-world/","permalink":"https://maplepoet.github.io/hexo/2024/03/07/hello-world/","categories":[],"tags":[],"excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub."}],"categories":[],"tags":[{"name":"WSL","slug":"WSL","permalink":"https://maplepoet.github.io/hexo/tags/WSL/"},{"name":"Linux","slug":"Linux","permalink":"https://maplepoet.github.io/hexo/tags/Linux/"},{"name":"Windows","slug":"Windows","permalink":"https://maplepoet.github.io/hexo/tags/Windows/"}]}